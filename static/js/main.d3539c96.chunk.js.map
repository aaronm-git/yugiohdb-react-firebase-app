{"version":3,"sources":["yugioh-logo.png","components/AlgoliaSearch.js","firebase.js","components/CardDetails.js","components/Loading.js","components/CardImage.js","components/CardPage.js","components/SiteNavBar.js","components/SiteFooter.js","components/Home.js","components/NotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","searchClient","algoliasearch","process","AlgoliaSearch","location","selectThisCard","CustomSearchBox","connectSearchBox","currentRefinement","refine","className","style","left","margin","FormControl","id","aria-label","value","onChange","event","currentTarget","placeholder","size","autoFocus","paddingLeft","CustomHits","connectHits","hits","CardDeck","map","hit","Card","key","objectID","minWidth","height","backgroundImage","imageURLs","full","backgroundRepeat","backgroundSize","ImgOverlay","backgroundColor","top","atk","def","race","Body","Title","to","onClick","name","CustomPagination","connectPagination","nbPages","range","filter","i","MobilePagination","Pagination","Item","preventDefault","active","page","jumpTo","Row","Col","InstantSearch","indexName","md","ClearRefinements","RefinementList","attribute","showMore","Configure","hitsPerPage","defaultRefinement","URLSearchParams","search","get","PoweredBy","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","CardDetails","card","GetListGroup","cardATK","cardRace","type","includes","ListGroup","Badge","variant","cardDescription","desc","replace","color","textColor","getType","whiteSpace","archetype","Object","keys","length","Spinner","animation","role","CardImage","cardId","React","useState","imgURL","setImgURL","runComplete","setRunComplete","foundImage","setFoundImage","verifyImgExists","functions","httpsCallable","useEffect","a","result","data","Data","exists","Status","storage","ref","getDownloadURL","url","console","error","findImage","Image","src","Loading","db","firestore","CardPage","setCard","cardReady","setCardReady","useParams","log","collection","where","parseInt","cardRef","docs","window","pathname","split","getMissingCard","card_images","lg","SiteNavBar","history","useHistory","searchTerm","setSearchTerm","Navbar","expand","bg","logo","alt","fluid","maxHeight","Form","onSubmit","e","push","target","maxWidth","SiteFooter","Environment","Nav","Home","recentCards","overflow","cardItem","Text","NotFound","Component","App","JSON","parse","localStorage","getItem","recentlyViewed","setRecentlyViewed","selectedCard","setItem","stringify","newRecentlyViewedList","item","slice","Container","minHeight","path","render","props","component","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d3539c96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/yugioh-logo.d8b3cab0.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport {\n  InstantSearch,\n  ClearRefinements,\n  RefinementList,\n  Configure,\n  PoweredBy,\n  connectSearchBox,\n  connectHits,\n  connectPagination,\n} from \"react-instantsearch-dom\";\nimport { Row, Col, FormControl, Card, CardDeck, Pagination } from \"react-bootstrap\";\nimport { Search, ChevronLeft, ChevronRight, ChevronDoubleLeft, ChevronDoubleRight } from \"react-bootstrap-icons\";\n\nconst searchClient = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_PUBLIC_KEY);\n\nexport default function AlgoliaSearch({ location, selectThisCard }) {\n  const getQuery = () => {\n    const query = new URLSearchParams(location.search);\n    return query.get(\"q\");\n  };\n\n  const AlgoliaHits = ({ hits }) => {\n    return (\n      <CardDeck>\n        {hits.map((hit) => (\n          <Card key={hit.objectID} className=\"shadow-sm mb-3\" style={{ minWidth: \"200px\" }}>\n            <div\n              style={{\n                height: \"200px\",\n                backgroundImage: `url(${hit.imageURLs.full}), url('https://storage.cloud.google.com/yugiohdb-app.appspot.com/cards/default.jpg')`,\n                backgroundRepeat: \"none\",\n                backgroundSize: \"cover\",\n              }}\n            />\n            <Card.ImgOverlay\n              className=\"py-1 text-white\"\n              style={{ backgroundColor: \"rgba(0,0,0,0.5)\", height: \"2rem\", top: \"168px\" }}\n            >\n              <div>\n                {typeof hit.atk === \"number\" && typeof hit.def === \"number\" ? (\n                  <p>\n                    {hit.atk}/{hit.def}\n                  </p>\n                ) : (\n                  <p>{hit.race}</p>\n                )}\n              </div>\n            </Card.ImgOverlay>\n            <Card.Body>\n              <Card.Title>\n                <Link to={`/card/${hit.objectID}`} onClick={() => selectThisCard(hit)}>{hit.name}</Link>\n              </Card.Title>\n            </Card.Body>\n          </Card>\n        ))}\n      </CardDeck>\n    );\n  };\n  const AlgoliaSearchBox = ({ currentRefinement, refine }) => {\n    return (\n      <div className=\"position-relative mb-4\">\n        <Search className=\"position-absolute text-secondary\" style={{ left: \"0\", margin: \"1rem\" }} />\n        <FormControl\n          id=\"algolia-searchBox\"\n          aria-label=\"Large\"\n          value={currentRefinement}\n          onChange={(event) => refine(event.currentTarget.value)}\n          placeholder=\"Search card by name\"\n          size=\"lg\"\n          autoFocus\n          style={{ paddingLeft: \"2.75rem\" }}\n        />\n      </div>\n    );\n  };\n  const AlgoliaPagination = ({ currentRefinement, nbPages, refine }) => {\n    const left = [\n        currentRefinement - 1 > 0 ? \"First\" : null,\n        currentRefinement - 1 > 0 ? \"Prev\" : null,\n        currentRefinement - 3 > 0 ? \"...\" : null,\n        currentRefinement - 2 > 0 ? currentRefinement - 2 : null,\n        currentRefinement - 1 > 0 ? currentRefinement - 1 : null,\n      ],\n      right = [\n        currentRefinement + 1 <= nbPages ? currentRefinement + 1 : null,\n        currentRefinement + 2 <= nbPages ? currentRefinement + 2 : null,\n        currentRefinement + 3 <= nbPages ? \"...\" : null,\n        currentRefinement + 1 <= nbPages ? \"Next\" : null,\n        currentRefinement + 1 <= nbPages ? \"Last\" : null,\n      ],\n      range = [...left, currentRefinement, ...right].filter((i) => i !== null);\n\n    const MobilePagination = () => {\n      return (\n        <Pagination size=\"lg\" className=\"justify-content-center d-lg-none\">\n          {currentRefinement - 1 > 0 ? (\n            <Pagination.Item\n              onClick={(event) => {\n                event.preventDefault();\n                refine(currentRefinement - 1);\n              }}\n            >\n              <ChevronLeft />\n            </Pagination.Item>\n          ) : (\n            \"\"\n          )}\n          <Pagination.Item key={`algoliaPage-${currentRefinement}-mobile`} active>\n            {currentRefinement}\n          </Pagination.Item>\n          {currentRefinement + 1 < nbPages ? (\n            <Pagination.Item\n              onClick={(event) => {\n                event.preventDefault();\n                refine(currentRefinement + 1);\n              }}\n            >\n              <ChevronRight />\n            </Pagination.Item>\n          ) : (\n            \"\"\n          )}\n        </Pagination>\n      );\n    };\n    return (\n      <>\n        <Pagination size=\"lg\" className=\"justify-content-center d-none d-lg-flex\">\n          {range.map((page) => {\n            let jumpTo;\n            let name;\n            switch (page) {\n              case \"First\":\n                jumpTo = 1;\n                name = <ChevronDoubleLeft />;\n                break;\n              case \"Prev\":\n                jumpTo = currentRefinement - 1;\n                name = <ChevronLeft />;\n                break;\n              case \"Next\":\n                jumpTo = currentRefinement + 1;\n                name = <ChevronRight />;\n                break;\n              case \"Last\":\n                jumpTo = nbPages;\n                name = <ChevronDoubleRight />;\n                break;\n              default:\n                jumpTo = page;\n                name = page;\n                break;\n            }\n            return (\n              <Pagination.Item\n                className={`${page === \"...\" ? \"disabled\" : \"\"}`}\n                active={page === currentRefinement}\n                key={`algoliaPage-${page}`}\n                onClick={(event) => {\n                  event.preventDefault();\n                  refine(jumpTo);\n                }}\n              >\n                {name}\n              </Pagination.Item>\n            );\n          })}\n        </Pagination>\n        <MobilePagination />\n      </>\n    );\n  };\n\n  const CustomSearchBox = connectSearchBox(AlgoliaSearchBox);\n  const CustomHits = connectHits(AlgoliaHits);\n  const CustomPagination = connectPagination(AlgoliaPagination);\n\n  return (\n    <Row>\n      <Col>\n        <InstantSearch indexName=\"cards\" searchClient={searchClient}>\n          <Row>\n            <Col md=\"3\">\n              <ClearRefinements />\n              <h5> Card Types</h5>\n              <RefinementList attribute=\"_tags\" showMore={true} />\n              <h5>Race</h5>\n              <RefinementList attribute=\"race\" showMore={true} />\n              <h5>Archetype</h5>\n              <RefinementList attribute=\"archetype\" showMore={true} />\n              <Configure hitsPerPage={8} />\n            </Col>\n            <Col md=\"9\">\n              <Configure hitsPerPage={12} />\n              <CustomSearchBox defaultRefinement={getQuery()} />\n              <CustomHits />\n              <CustomPagination />\n            </Col>\n          </Row>\n          <PoweredBy className=\"justify-content-center\" />\n        </InstantSearch>\n      </Col>\n    </Row>\n  );\n}\n","import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;\n","import React from \"react\";\nimport { ListGroup, Badge } from \"react-bootstrap\";\nexport default function CardDetails({ card }) {\n  const getType = (type) => {\n    let color = \"\";\n    let textColor = \"\";\n    switch (type) {\n      case \"Effect Monster\":\n        color = \"orange\";\n        textColor = \"white\";\n        break;\n      case \"Trap Card\":\n        color = \"#af3568\";\n        textColor = \"white\";\n        break;\n      case \"Spell Card\":\n        color = \"#3edf80\";\n        textColor = \"white\";\n        break;\n      default:\n        break;\n    }\n    return (\n      <Badge variant=\"secondary\" style={{ backgroundColor: color, color: textColor }}>\n        {type}\n      </Badge>\n    );\n  };\n  const GetListGroup = ({ card }) => {\n    let cardATK;\n    let cardRace;\n    if (card.type && card.type.includes(\"Monster\")) {\n      cardATK = (\n        <ListGroup.Item>\n          ATK: {card.atk} / DEF: {card.def}\n        </ListGroup.Item>\n      );\n      cardRace = <Badge variant=\"secondary\">{card.race}</Badge>;\n    }\n    let cardDescription = card.desc.replace(\"●\", \"\\n●\");\n    return (\n      <ListGroup variant=\"flush\">\n        <ListGroup.Item>\n          <div className=\"d-flex justify-content-between\">\n            <div>\n              {getType(card.type)} / ID: {card.id}\n            </div>\n            <div>\n              <Badge variant=\"secondary\">{card.attribute}</Badge> {cardRace}\n            </div>\n          </div>\n        </ListGroup.Item>\n        {cardATK}\n        <ListGroup.Item style={{ whiteSpace: \"pre-line\" }}>{cardDescription}</ListGroup.Item>\n        <ListGroup.Item>\n          <p>Type: {card.type}</p>\n          <p>Race: {card.race}</p>\n          <p>Archetype: {card.archetype}</p>\n        </ListGroup.Item>\n        {/* <ListGroup.Item>\n            <p>TCG Initial Release: {card.archetype}</p>\n            <p>OCG Initial Release: {card.archetype}</p>\n          </ListGroup.Item> */}\n      </ListGroup>\n    );\n  };\n  return (\n    <div className=\"position-relative\">\n      <h2 className=\"text-center h4\">{card.name}</h2>\n      {Object.keys(card).length ? <GetListGroup card={card} /> : <h5>Invalid Id</h5>}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport default () => {\n  return (\n    <div className=\"text-center my-3\">\n      <Spinner animation=\"border\" role=\"status\" variant=\"warning\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  );\n};\n","import React from \"react\";\nimport firebase from \"../firebase\";\n\nimport { Image } from \"react-bootstrap\";\nimport Loading from \"./Loading\";\n\nexport default function CardImage({ cardId }) {\n  const [imgURL, setImgURL] = React.useState(\"\");\n  const [runComplete, setRunComplete] = React.useState(false);\n  const [foundImage, setFoundImage] = React.useState(false);\n  const verifyImgExists = firebase.functions().httpsCallable(\"verifyImgExists\");\n  // const verifyImgExists = firebase\n  //   .functions()\n  //   .useFunctionsEmulator(\"http://localhost:5001/yugiohdb-app/us-central1/verifyImgExists\");\n  React.useEffect(() => {\n    if (cardId && runComplete === false) {\n      async function findImage() {\n        try {\n          const result = await verifyImgExists({ cardId });\n          if (result.data.Data.exists && result.data.Status !== 500) {\n            const url = await firebase.storage().ref(`cards/${cardId}.jpg`).getDownloadURL();\n            setImgURL(url);\n          }\n        } catch (error) {\n          console.error(error);\n          setImgURL(\"https://sportzor.com/images/ygo_cardback_sleeves19.jpg\");\n        }\n        setFoundImage(true);\n      }\n      findImage();\n      setRunComplete(true);\n    }\n  }, [cardId, imgURL, runComplete, verifyImgExists]);\n\n  return <>{foundImage ? <Image src={imgURL} className=\"w-75\" /> : <Loading />}</>;\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport firebase from \"../firebase\";\nimport { Row, Col } from \"react-bootstrap\";\n\nimport CardDetails from \"./CardDetails\";\nimport Loading from \"./Loading\";\nimport CardImage from \"./CardImage\";\n\nconst db = firebase.firestore();\nexport default function CardPage() {\n  const [card, setCard] = React.useState({});\n  const [cardReady, setCardReady] = React.useState(false);\n  const { id } = useParams();\n  React.useEffect(() => {\n    const getMissingCard = async () => {\n      console.log(\"Querying...\");\n      const cardRef = await db.collection(\"cards\").where(\"id\", \"==\", parseInt(id, 10)).get();\n      if (cardRef.size) {\n        setCard(cardRef.docs[0].data());\n        setCardReady(true);\n      } else {\n        window.location.replace(`/${window.location.pathname.split(\"/\")[1]}/404`);\n      }\n    };\n    getMissingCard();\n  }, [id]);\n  return (\n    <Row>\n      <Col className=\"text-center mb-2 mb-md-0\">\n        <CardImage cardId={cardReady ? card.card_images[0].id : \"\"} />\n      </Col>\n      <Col md=\"8\" lg=\"5\">\n        {cardReady ? <CardDetails card={card} /> : <Loading />}\n      </Col>\n      <Col md=\"12\" lg=\"3\" className=\"text-center py-3\">\n        <h5>Card Stats</h5>\n      </Col>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Navbar, Form, FormControl, Image } from \"react-bootstrap\";\nimport logo from \"../yugioh-logo.png\"\n\nexport default function SiteNavBar() {\n  const history = useHistory();\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const updateSearchTerm = (e) => {\n    setSearchTerm(e.target.value);\n  };\n  const searchTermSubmit = (e) => {\n    e.preventDefault();\n    history.push(`/search?q=${searchTerm}`);\n  };\n  return (\n    <Navbar expand=\"lg\" className=\"rounded shadow-lg justify-content-between\" variant=\"dark\" bg=\"dark\">\n      <Link to=\"/\" className=\"navbar-brand d-block mx-auto\">\n        <Image src={logo} alt={process.env.REACT_APP_SITE_TITLE} fluid style={{maxHeight: \"4rem\"}}/>\n      </Link>\n      <Form onSubmit={searchTermSubmit} className=\"w-100 d-flex justify-content-center justify-content-lg-end align-items-center\">\n        <FormControl type=\"text\" className=\"w-50 mr-2\" placeholder=\"Search\" onChange={updateSearchTerm} style={{maxWidth: \"200px\"}}/>\n        <Link to={`/search/?q=${searchTerm}`} className=\"btn btn-outline-warning\">\n          SEARCH\n        </Link>\n      </Form>\n    </Navbar>\n  );\n}\n","import React from \"react\";\n\nimport { Navbar, Nav, Image } from \"react-bootstrap\";\n\nexport default function SiteFooter() {\n  const Environment = () => {\n    if (process.env.NODE_ENV === \"development\") return <h5 className=\"text-uppercase\">{process.env.NODE_ENV}</h5>;\n    else return null;\n  };\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" className=\"text-white\">\n      <Nav className=\"mr-auto\">\n        <small className=\"d-block mb-3\">© 2020</small>\n      </Nav>\n      <Environment />\n    </Navbar>\n  );\n}\n","import React from \"react\";\nimport { CardDeck, Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Home({ recentCards, selectThisCard }) {\n  const cardItem = (card) => (\n    <Card\n      key={\"recent-\" + card.objectID}\n      style={{ minWidth: \"200px\", maxWidth: \"200px\"}}\n      className=\"mb-2 shadow-sm\"\n    >\n      <div\n        style={{\n          height: \"200px\",\n          backgroundImage: `url(${card.imageURLs.full}), url('https://storage.cloud.google.com/yugiohdb-app.appspot.com/cards/default.jpg')`,\n          backgroundRepeat: \"none\",\n          backgroundSize: \"cover\",\n        }}\n      />\n      <Card.ImgOverlay\n        className=\"py-1 text-white\"\n        style={{\n          backgroundColor: \"rgba(0,0,0,0.5)\",\n          height: \"2rem\",\n          top: \"168px\",\n        }}\n      >\n        <div>\n          {typeof card.atk === \"number\" && typeof card.def === \"number\" ? (\n            <p>\n              {card.atk}/{card.def}\n            </p>\n          ) : (\n            <p>{card.race}</p>\n          )}\n        </div>\n      </Card.ImgOverlay>\n      <Card.Body>\n        <Card.Title>\n          <Link\n            to={`/card/${card.objectID}`}\n            onClick={() => selectThisCard(card)}\n          >\n            {card.name}\n          </Link>\n        </Card.Title>\n      </Card.Body>\n    </Card>\n  );\n  return (\n    <>\n      <h5>Recently Viewed Cards</h5>\n      <CardDeck className=\"flex-row flex-nowrap\" style={{ overflow: \"scroll\" }}>\n        {recentCards ? (\n          recentCards.map((card) => cardItem(card))\n        ) : (\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-center text-muted\">\n                No Recently Viewed Cards\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        )}\n      </CardDeck>\n    </>\n  );\n}\n","import React, { Component } from \"react\";\n\nexport default class NotFound extends Component {\n  render() {\n    return (\n      <div className=\"text-center\">\n        <h1>404</h1>\n        <h5>Not Found</h5>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\n\n// import SearchResults from \"./SearchResults\";\nimport AlgoliaSearch from \"./AlgoliaSearch\";\nimport CardPage from \"./CardPage\";\nimport SiteNavBar from \"./SiteNavBar\";\nimport SiteFooter from \"./SiteFooter\";\nimport Home from \"./Home\";\nimport NotFound from \"./NotFound\";\n\nfunction App() {\n  const [card, setCard] = React.useState({});\n  const [recentlyViewed, setRecentlyViewed] = React.useState(JSON.parse(localStorage.getItem(\"recentlyViewed\")) || []);\n  const selectThisCard = (selectedCard) => {\n    console.log(\"Select card...\", selectedCard);\n    localStorage.setItem(\"selectedCard\", JSON.stringify(selectedCard));\n    setCard(selectedCard);\n    let newRecentlyViewedList = [\n      selectedCard,\n      ...recentlyViewed.filter((item) => {\n        return selectedCard && item ? item.objectID !== selectedCard.objectID : false;\n      }),\n    ];\n    setRecentlyViewed(newRecentlyViewedList.slice(0, 6));\n    localStorage.setItem(\"recentlyViewed\", JSON.stringify(newRecentlyViewedList));\n  };\n  return (\n    <Router>\n      <Container className=\"mb-3\" style={{ minHeight: \"calc(100vh - 83px)\" }}>\n        <Row>\n          <Col className=\"py-3\">\n            <SiteNavBar />\n          </Col>\n        </Row>\n        <Card className=\"shadow-lg\">\n          <Card.Body>\n            <Switch>\n              <Route\n                path=\"/search\"\n                render={(props) => (\n                  <AlgoliaSearch {...props} selectThisCard={(selectedCard) => selectThisCard(selectedCard)} />\n                )}\n              />\n              <Route\n                path=\"/card/:id\"\n                render={(props) => (\n                  <CardPage {...props} selectThisCard={(selectedCard) => selectThisCard(selectedCard)} card={card} />\n                )}\n              />\n              <Route path=\"/404\" component={NotFound} />\n              <Route path=\"/\">\n                <Home recentCards={recentlyViewed} selectThisCard={(selectedCard) => selectThisCard(selectedCard)} />\n              </Route>\n            </Switch>\n          </Card.Body>\n        </Card>\n      </Container>\n      <SiteFooter />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}