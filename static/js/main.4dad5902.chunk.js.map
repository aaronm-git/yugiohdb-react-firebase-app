{"version":3,"sources":["components/AlgoliaSearch.js","firebase.js","components/CardDetails.js","components/Loading.js","components/CardImage.js","components/CardPage.js","components/SiteNavBar.js","components/SiteFooter.js","components/Home.js","components/NotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["algoliasearch","process","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","CardDetails","card","GetListGroup","cardATK","cardRace","type","includes","ListGroup","Item","atk","def","Badge","variant","race","cardDescription","desc","replace","className","color","textColor","style","backgroundColor","getType","id","attribute","whiteSpace","archetype","name","Object","keys","length","Spinner","animation","role","CardImage","cardId","React","useState","imgURL","setImgURL","runComplete","setRunComplete","foundImage","setFoundImage","verifyImgExists","functions","httpsCallable","useEffect","a","result","data","Data","exists","Status","storage","ref","getDownloadURL","url","console","error","findImage","Image","src","Loading","db","firestore","CardPage","setCard","cardReady","setCardReady","useParams","log","collection","where","parseInt","get","cardRef","size","docs","window","location","pathname","split","getMissingCard","Row","Col","card_images","md","lg","SiteNavBar","history","useHistory","searchTerm","setSearchTerm","Navbar","expand","bg","to","Form","inline","onSubmit","e","preventDefault","push","FormControl","placeholder","onChange","target","value","SiteFooter","Environment","Nav","Home","recentCards","selectThisCard","CardDeck","map","Card","key","Body","Title","onClick","cardItem","Text","NotFound","Component","App","JSON","parse","localStorage","getItem","recentlyViewed","setRecentlyViewed","selectedCard","setItem","stringify","newRecentlyViewedList","filter","item","slice","Container","minHeight","path","render","props","component","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+cAgBqBA,IAAcC,aAAsCA,oC,8CCJzEC,IAASC,cAXc,CACrBC,OAAQH,0CACRI,WAAYJ,+BACZK,YAAaL,sCACbM,UAAWN,eACXO,cAAeP,2BACfQ,kBAAmBR,eACnBS,MAAOT,4CACPU,cAAeV,iBAIjBC,IAASU,YAEMV,QAAf,E,kBCbe,SAASW,EAAT,GAAgC,IAATC,EAAQ,EAARA,KA0B9BC,EAAe,SAAC,GAAc,IAC9BC,EACAC,EAFkBH,EAAW,EAAXA,KAGlBA,EAAKI,MAAQJ,EAAKI,KAAKC,SAAS,aAClCH,EACE,kBAACI,EAAA,EAAUC,KAAX,aACQP,EAAKQ,IADb,WAC0BR,EAAKS,KAGjCN,EAAW,kBAACO,EAAA,EAAD,CAAOC,QAAQ,aAAaX,EAAKY,OAE9C,IAAIC,EAAkBb,EAAKc,KAAKC,QAAQ,SAAK,YAC7C,OACE,kBAACT,EAAA,EAAD,CAAWK,QAAQ,SACjB,kBAACL,EAAA,EAAUC,KAAX,KACE,yBAAKS,UAAU,kCACb,6BAzCM,SAACZ,GACf,IAAIa,EAAQ,GACRC,EAAY,GAChB,OAAQd,GACN,IAAK,iBACHa,EAAQ,SACRC,EAAY,QACZ,MACF,IAAK,YACHD,EAAQ,UACRC,EAAY,QACZ,MACF,IAAK,aACHD,EAAQ,UACRC,EAAY,QAKhB,OACE,kBAACR,EAAA,EAAD,CAAOC,QAAQ,YAAYQ,MAAO,CAAEC,gBAAiBH,EAAOA,MAAOC,IAChEd,GAqBMiB,CAAQrB,EAAKI,MADhB,UAC8BJ,EAAKsB,IAEnC,6BACE,kBAACZ,EAAA,EAAD,CAAOC,QAAQ,aAAaX,EAAKuB,WADnC,IACuDpB,KAI1DD,EACD,kBAACI,EAAA,EAAUC,KAAX,CAAgBY,MAAO,CAAEK,WAAY,aAAeX,GACpD,kBAACP,EAAA,EAAUC,KAAX,KACE,oCAAUP,EAAKI,MACf,oCAAUJ,EAAKY,MACf,yCAAeZ,EAAKyB,cAS5B,OACE,yBAAKT,UAAU,qBACb,wBAAIA,UAAU,kBAAkBhB,EAAK0B,MACpCC,OAAOC,KAAK5B,GAAM6B,OAAS,kBAAC5B,EAAD,CAAcD,KAAMA,IAAW,2C,aClElD,aACb,OACE,yBAAKgB,UAAU,oBACb,kBAACc,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAASrB,QAAQ,WAChD,0BAAMK,UAAU,WAAhB,iB,SCDO,SAASiB,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAAU,EAChBC,IAAMC,SAAS,IADC,mBACrCC,EADqC,KAC7BC,EAD6B,OAENH,IAAMC,UAAS,GAFT,mBAErCG,EAFqC,KAExBC,EAFwB,OAGRL,IAAMC,UAAS,GAHP,mBAGrCK,EAHqC,KAGzBC,EAHyB,KAItCC,EAAkBvD,EAASwD,YAAYC,cAAc,mBAwB3D,OApBAV,IAAMW,WAAU,WACd,GAAIZ,IAA0B,IAAhBK,EAAuB,6CACnC,8BAAAQ,EAAA,+EAEyBJ,EAAgB,CAAET,WAF3C,YAEUc,EAFV,QAGeC,KAAKC,KAAKC,QAAiC,MAAvBH,EAAOC,KAAKG,OAH/C,gCAIwBhE,EAASiE,UAAUC,IAAnB,gBAAgCpB,EAAhC,SAA8CqB,iBAJtE,OAIYC,EAJZ,OAKMlB,EAAUkB,GALhB,yDAQIC,QAAQC,MAAR,MACApB,EAAU,0DATd,QAWEI,GAAc,GAXhB,2DADmC,uBAAC,WAAD,wBAcnCiB,GACAnB,GAAe,MAEhB,CAACN,EAAQG,EAAQE,EAAaI,IAE1B,oCAAGF,EAAa,kBAACmB,EAAA,EAAD,CAAOC,IAAKxB,EAAQrB,UAAU,SAAY,kBAAC8C,EAAD,OCzBnE,IAAMC,EAAK3E,EAAS4E,YACL,SAASC,IAAY,IAAD,EACT9B,IAAMC,SAAS,IADN,mBAC1BpC,EAD0B,KACpBkE,EADoB,OAEC/B,IAAMC,UAAS,GAFhB,mBAE1B+B,EAF0B,KAEfC,EAFe,KAGzB9C,EAAO+C,cAAP/C,GAcR,OAbAa,IAAMW,WAAU,YACM,uCAAG,4BAAAC,EAAA,6DACrBU,QAAQa,IAAI,eADS,SAECP,EAAGQ,WAAW,SAASC,MAAM,KAAM,KAAMC,SAASnD,EAAI,KAAKoD,MAF5D,QAEfC,EAFe,QAGTC,MACVV,EAAQS,EAAQE,KAAK,GAAG5B,QACxBmB,GAAa,IAEbU,OAAOC,SAAShE,QAAhB,WAA4B+D,OAAOC,SAASC,SAASC,MAAM,KAAK,GAAhE,SAPmB,2CAAH,qDAUpBC,KACC,CAAC5D,IAEF,kBAAC6D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKpE,UAAU,4BACb,kBAACiB,EAAD,CAAWC,OAAQiC,EAAYnE,EAAKqF,YAAY,GAAG/D,GAAK,MAE1D,kBAAC8D,EAAA,EAAD,CAAKE,GAAG,IAAIC,GAAG,KACZpB,EAAY,kBAACpE,EAAD,CAAaC,KAAMA,IAAW,kBAAC8D,EAAD,OAE7C,kBAACsB,EAAA,EAAD,CAAKE,GAAG,KAAKC,GAAG,IAAIvE,UAAU,oBAC5B,4C,sBChCO,SAASwE,IACtB,IAAMC,EAAUC,cADmB,EAECvD,IAAMC,SAAS,IAFhB,mBAE5BuD,EAF4B,KAEhBC,EAFgB,KAUnC,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAK9E,UAAU,4CAA4CL,QAAQ,OAAOoF,GAAG,QAC1F,kBAAC,IAAD,CAAMC,GAAG,IAAIhF,UAAU,gBACpB7B,yBAEH,kBAAC8G,EAAA,EAAD,CAAMC,QAAM,EAAClF,UAAU,oBAAoBmF,SATtB,SAACC,GACxBA,EAAEC,iBACFZ,EAAQa,KAAR,oBAA0BX,MAQtB,kBAACY,EAAA,EAAD,CAAanG,KAAK,OAAOY,UAAU,UAAUwF,YAAY,SAASC,SAb/C,SAACL,GACxBR,EAAcQ,EAAEM,OAAOC,UAanB,kBAAC,IAAD,CAAMX,GAAE,qBAAgBL,GAAc3E,UAAU,2BAAhD,Y,aCjBO,SAAS4F,IACtB,IAAMC,EAAc,WAEb,OAAO,MAEd,OACE,kBAAChB,EAAA,EAAD,CAAQE,GAAG,OAAOpF,QAAQ,OAAOK,UAAU,cACzC,kBAAC8F,EAAA,EAAD,CAAK9F,UAAU,WACb,2BAAOA,UAAU,gBAAjB,cAEF,kBAAC6F,EAAD,OCVS,SAASE,EAAT,GAAgD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eAe1C,OACE,oCACE,oCACA,6BACA,qDACA,kBAACC,EAAA,EAAD,KACGF,EACCA,EAAYG,KAAI,SAACnH,GAAD,OArBP,SAACA,GAAD,OACf,kBAACoH,EAAA,EAAD,CAAMC,IAAK,UAAYrH,EAAKsB,IAE1B,kBAAC8F,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,KAAavH,EAAK0B,MACjB1B,EAAKI,KACN,6BAEA,kBAAC,IAAD,CAAM4F,GAAE,gBAAWhG,EAAKsB,IAAMN,UAAU,4BAA4BwG,QAAS,kBAAMP,EAAejH,KAAlG,eAa4ByH,CAASzH,MAEnC,kBAACoH,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKM,KAAN,CAAW1G,UAAU,0BAArB,gC,wCC5BO2G,E,uKAEjB,OACE,yBAAK3G,UAAU,eACb,mCACA,8C,GAL8B4G,aCgEvBC,MArDf,WAAgB,IAAD,EACW1F,IAAMC,SAAS,IAD1B,mBACNpC,EADM,KACAkE,EADA,OAE+B/B,IAAMC,SAAS0F,KAAKC,MAAMC,aAAaC,QAAQ,oBAAsB,IAFpG,mBAENC,EAFM,KAEUC,EAFV,KAGPlB,EAAiB,SAACmB,GACtB3E,QAAQa,IAAI,iBAAkB8D,GAC9BJ,aAAaK,QAAQ,eAAgBP,KAAKQ,UAAUF,IACpDlE,EAAQkE,GACR,IAAIG,EAAqB,CACvBH,GADuB,mBAEpBF,EAAeM,QAAO,SAACC,GACxB,SAAOL,IAAgBK,IAAOA,EAAKnH,KAAO8G,EAAa9G,QAG3D6G,EAAkBI,EAAsBG,MAAM,EAAG,IACjDV,aAAaK,QAAQ,iBAAkBP,KAAKQ,UAAUC,KAExD,OACE,kBAAC,IAAD,KACE,kBAACI,EAAA,EAAD,CAAW3H,UAAU,OAAOG,MAAO,CAAEyH,UAAW,uBAC9C,kBAACzD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKpE,UAAU,QACb,kBAACwE,EAAD,QAGJ,kBAAC4B,EAAA,EAAD,CAAMpG,UAAU,aACd,kBAACoG,EAAA,EAAKE,KAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEuB,KAAK,UACLC,OAAQ,SAACC,OAKX,kBAAC,IAAD,CACEF,KAAK,YACLC,OAAQ,SAACC,GAAD,OACN,kBAAC9E,EAAD,iBAAc8E,EAAd,CAAqB9B,eAAgB,SAACmB,GAAD,OAAkBnB,EAAemB,IAAepI,KAAMA,QAG/F,kBAAC,IAAD,CAAO6I,KAAK,OAAOG,UAAWrB,IAC9B,kBAAC,IAAD,CAAOkB,KAAK,KACV,kBAAC9B,EAAD,CAAMC,YAAakB,EAAgBjB,eAAgB,SAACmB,GAAD,OAAkBnB,EAAemB,WAM9F,kBAACxB,EAAD,QCjDcqC,QACW,cAA7BnE,OAAOC,SAASmE,UAEe,UAA7BpE,OAAOC,SAASmE,UAEhBpE,OAAOC,SAASmE,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApG,GACLD,QAAQC,MAAMA,EAAMqG,c","file":"static/js/main.4dad5902.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport {\n  InstantSearch,\n  ClearRefinements,\n  RefinementList,\n  Configure,\n  PoweredBy,\n  connectSearchBox,\n  connectHits,\n  connectPagination,\n} from \"react-instantsearch-dom\";\nimport { Row, Col, FormControl, Card, CardDeck, Pagination } from \"react-bootstrap\";\nimport { Search, ChevronLeft, ChevronRight, ChevronDoubleLeft, ChevronDoubleRight } from \"react-bootstrap-icons\";\n\nconst searchClient = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_PUBLIC_KEY);\n\nexport default function AlgoliaSearch({ location }) {\n  const getQuery = () => {\n    const query = new URLSearchParams(location.search);\n    return query.get(\"q\");\n  };\n\n  const AlgoliaHits = ({ hits }) => {\n    return (\n      <CardDeck>\n        {hits.map((hit) => (\n          <Card key={hit.objectID} className=\"shadow-sm mb-3\" style={{ minWidth: \"200px\" }}>\n            <div\n              style={{\n                height: \"200px\",\n                backgroundImage: `url(${hit.imageURLs.full}), url('https://storage.cloud.google.com/yugiohdb-app.appspot.com/cards/default.jpg')`,\n                backgroundRepeat: \"none\",\n                backgroundSize: \"cover\",\n              }}\n            />\n            <Card.ImgOverlay\n              className=\"py-1 text-white\"\n              style={{ backgroundColor: \"rgba(0,0,0,0.5)\", height: \"2rem\", top: \"168px\" }}\n            >\n              <div>\n                {typeof hit.atk === \"number\" && typeof hit.def === \"number\" ? (\n                  <p>\n                    {hit.atk}/{hit.def}\n                  </p>\n                ) : (\n                  <p>{hit.race}</p>\n                )}\n              </div>\n            </Card.ImgOverlay>\n            <Card.Body>\n              <Card.Title>\n                <Link to={`/card/${hit.objectID}`}>{hit.name}</Link>\n              </Card.Title>\n            </Card.Body>\n          </Card>\n        ))}\n      </CardDeck>\n    );\n  };\n  const AlgoliaSearchBox = ({ currentRefinement, refine }) => {\n    return (\n      <div className=\"position-relative mb-4\">\n        <Search className=\"position-absolute text-secondary\" style={{ left: \"0\", margin: \"1rem\" }} />\n        <FormControl\n          id=\"algolia-searchBox\"\n          aria-label=\"Large\"\n          value={currentRefinement}\n          onChange={(event) => refine(event.currentTarget.value)}\n          placeholder=\"Search card by name\"\n          size=\"lg\"\n          autoFocus\n          style={{ paddingLeft: \"2.75rem\" }}\n        />\n      </div>\n    );\n  };\n  const AlgoliaPagination = ({ currentRefinement, nbPages, refine }) => {\n    const left = [\n        currentRefinement - 1 > 0 ? \"First\" : null,\n        currentRefinement - 1 > 0 ? \"Prev\" : null,\n        currentRefinement - 3 > 0 ? \"...\" : null,\n        currentRefinement - 2 > 0 ? currentRefinement - 2 : null,\n        currentRefinement - 1 > 0 ? currentRefinement - 1 : null,\n      ],\n      right = [\n        currentRefinement + 1 <= nbPages ? currentRefinement + 1 : null,\n        currentRefinement + 2 <= nbPages ? currentRefinement + 2 : null,\n        currentRefinement + 3 <= nbPages ? \"...\" : null,\n        currentRefinement + 1 <= nbPages ? \"Next\" : null,\n        currentRefinement + 1 <= nbPages ? \"Last\" : null,\n      ],\n      range = [...left, currentRefinement, ...right].filter((i) => i !== null);\n\n    const MobilePagination = () => {\n      return (\n        <Pagination size=\"lg\" className=\"justify-content-center d-lg-none\">\n          {currentRefinement - 1 > 0 ? (\n            <Pagination.Item\n              onClick={(event) => {\n                event.preventDefault();\n                refine(currentRefinement - 1);\n              }}\n            >\n              <ChevronLeft />\n            </Pagination.Item>\n          ) : (\n            \"\"\n          )}\n          <Pagination.Item key={`algoliaPage-${currentRefinement}-mobile`} active>\n            {currentRefinement}\n          </Pagination.Item>\n          {currentRefinement + 1 < nbPages ? (\n            <Pagination.Item\n              onClick={(event) => {\n                event.preventDefault();\n                refine(currentRefinement + 1);\n              }}\n            >\n              <ChevronRight />\n            </Pagination.Item>\n          ) : (\n            \"\"\n          )}\n        </Pagination>\n      );\n    };\n    return (\n      <>\n        <Pagination size=\"lg\" className=\"justify-content-center d-none d-lg-flex\">\n          {range.map((page) => {\n            let jumpTo;\n            let name;\n            switch (page) {\n              case \"First\":\n                jumpTo = 1;\n                name = <ChevronDoubleLeft />;\n                break;\n              case \"Prev\":\n                jumpTo = currentRefinement - 1;\n                name = <ChevronLeft />;\n                break;\n              case \"Next\":\n                jumpTo = currentRefinement + 1;\n                name = <ChevronRight />;\n                break;\n              case \"Last\":\n                jumpTo = nbPages;\n                name = <ChevronDoubleRight />;\n                break;\n              default:\n                jumpTo = page;\n                name = page;\n                break;\n            }\n            return (\n              <Pagination.Item\n                className={`${page === \"...\" ? \"disabled\" : \"\"}`}\n                active={page === currentRefinement}\n                key={`algoliaPage-${page}`}\n                onClick={(event) => {\n                  event.preventDefault();\n                  refine(jumpTo);\n                }}\n              >\n                {name}\n              </Pagination.Item>\n            );\n          })}\n        </Pagination>\n        <MobilePagination />\n      </>\n    );\n  };\n\n  const CustomSearchBox = connectSearchBox(AlgoliaSearchBox);\n  const CustomHits = connectHits(AlgoliaHits);\n  const CustomPagination = connectPagination(AlgoliaPagination);\n\n  return (\n    <Row>\n      <Col>\n        <InstantSearch indexName=\"cards\" searchClient={searchClient}>\n          <Row>\n            <Col md=\"3\">\n              <ClearRefinements />\n              <h5> Card Types</h5>\n              <RefinementList attribute=\"_tags\" showMore={true} />\n              <h5>Race</h5>\n              <RefinementList attribute=\"race\" showMore={true} />\n              <h5>Archetype</h5>\n              <RefinementList attribute=\"archetype\" showMore={true} />\n              <Configure hitsPerPage={8} />\n            </Col>\n            <Col md=\"9\">\n              <Configure hitsPerPage={12} />\n              <CustomSearchBox defaultRefinement={getQuery()} />\n              <CustomHits />\n              <CustomPagination />\n            </Col>\n          </Row>\n          <PoweredBy className=\"justify-content-center\" />\n        </InstantSearch>\n      </Col>\n    </Row>\n  );\n}\n","import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;\n","import React from \"react\";\nimport { ListGroup, Badge } from \"react-bootstrap\";\nexport default function CardDetails({ card }) {\n  const getType = (type) => {\n    let color = \"\";\n    let textColor = \"\";\n    switch (type) {\n      case \"Effect Monster\":\n        color = \"orange\";\n        textColor = \"white\";\n        break;\n      case \"Trap Card\":\n        color = \"#af3568\";\n        textColor = \"white\";\n        break;\n      case \"Spell Card\":\n        color = \"#3edf80\";\n        textColor = \"white\";\n        break;\n      default:\n        break;\n    }\n    return (\n      <Badge variant=\"secondary\" style={{ backgroundColor: color, color: textColor }}>\n        {type}\n      </Badge>\n    );\n  };\n  const GetListGroup = ({ card }) => {\n    let cardATK;\n    let cardRace;\n    if (card.type && card.type.includes(\"Monster\")) {\n      cardATK = (\n        <ListGroup.Item>\n          ATK: {card.atk} / DEF: {card.def}\n        </ListGroup.Item>\n      );\n      cardRace = <Badge variant=\"secondary\">{card.race}</Badge>;\n    }\n    let cardDescription = card.desc.replace(\"●\", \"\\n●\");\n    return (\n      <ListGroup variant=\"flush\">\n        <ListGroup.Item>\n          <div className=\"d-flex justify-content-between\">\n            <div>\n              {getType(card.type)} / ID: {card.id}\n            </div>\n            <div>\n              <Badge variant=\"secondary\">{card.attribute}</Badge> {cardRace}\n            </div>\n          </div>\n        </ListGroup.Item>\n        {cardATK}\n        <ListGroup.Item style={{ whiteSpace: \"pre-line\" }}>{cardDescription}</ListGroup.Item>\n        <ListGroup.Item>\n          <p>Type: {card.type}</p>\n          <p>Race: {card.race}</p>\n          <p>Archetype: {card.archetype}</p>\n        </ListGroup.Item>\n        {/* <ListGroup.Item>\n            <p>TCG Initial Release: {card.archetype}</p>\n            <p>OCG Initial Release: {card.archetype}</p>\n          </ListGroup.Item> */}\n      </ListGroup>\n    );\n  };\n  return (\n    <div className=\"position-relative\">\n      <h2 className=\"text-center h4\">{card.name}</h2>\n      {Object.keys(card).length ? <GetListGroup card={card} /> : <h5>Invalid Id</h5>}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport default () => {\n  return (\n    <div className=\"text-center my-3\">\n      <Spinner animation=\"border\" role=\"status\" variant=\"warning\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  );\n};\n","import React from \"react\";\nimport firebase from \"../firebase\";\n\nimport { Image } from \"react-bootstrap\";\nimport Loading from \"./Loading\";\n\nexport default function CardImage({ cardId }) {\n  const [imgURL, setImgURL] = React.useState(\"\");\n  const [runComplete, setRunComplete] = React.useState(false);\n  const [foundImage, setFoundImage] = React.useState(false);\n  const verifyImgExists = firebase.functions().httpsCallable(\"verifyImgExists\");\n  // const verifyImgExists = firebase\n  //   .functions()\n  //   .useFunctionsEmulator(\"http://localhost:5001/yugiohdb-app/us-central1/verifyImgExists\");\n  React.useEffect(() => {\n    if (cardId && runComplete === false) {\n      async function findImage() {\n        try {\n          const result = await verifyImgExists({ cardId });\n          if (result.data.Data.exists && result.data.Status !== 500) {\n            const url = await firebase.storage().ref(`cards/${cardId}.jpg`).getDownloadURL();\n            setImgURL(url);\n          }\n        } catch (error) {\n          console.error(error);\n          setImgURL(\"https://sportzor.com/images/ygo_cardback_sleeves19.jpg\");\n        }\n        setFoundImage(true);\n      }\n      findImage();\n      setRunComplete(true);\n    }\n  }, [cardId, imgURL, runComplete, verifyImgExists]);\n\n  return <>{foundImage ? <Image src={imgURL} className=\"w-75\" /> : <Loading />}</>;\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport firebase from \"../firebase\";\nimport { Row, Col } from \"react-bootstrap\";\n\nimport CardDetails from \"./CardDetails\";\nimport Loading from \"./Loading\";\nimport CardImage from \"./CardImage\";\n\nconst db = firebase.firestore();\nexport default function CardPage() {\n  const [card, setCard] = React.useState({});\n  const [cardReady, setCardReady] = React.useState(false);\n  const { id } = useParams();\n  React.useEffect(() => {\n    const getMissingCard = async () => {\n      console.log(\"Querying...\");\n      const cardRef = await db.collection(\"cards\").where(\"id\", \"==\", parseInt(id, 10)).get();\n      if (cardRef.size) {\n        setCard(cardRef.docs[0].data());\n        setCardReady(true);\n      } else {\n        window.location.replace(`/${window.location.pathname.split(\"/\")[1]}/404`);\n      }\n    };\n    getMissingCard();\n  }, [id]);\n  return (\n    <Row>\n      <Col className=\"text-center mb-2 mb-md-0\">\n        <CardImage cardId={cardReady ? card.card_images[0].id : \"\"} />\n      </Col>\n      <Col md=\"8\" lg=\"5\">\n        {cardReady ? <CardDetails card={card} /> : <Loading />}\n      </Col>\n      <Col md=\"12\" lg=\"3\" className=\"text-center py-3\">\n        <h5>Card Stats</h5>\n      </Col>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Navbar, Form, FormControl } from \"react-bootstrap\";\n\nexport default function SiteNavBar() {\n  const history = useHistory();\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const updateSearchTerm = (e) => {\n    setSearchTerm(e.target.value);\n  };\n  const searchTermSubmit = (e) => {\n    e.preventDefault();\n    history.push(`/search?q=${searchTerm}`);\n  };\n  return (\n    <Navbar expand=\"lg\" className=\"rounded shadow-lg justify-content-between\" variant=\"dark\" bg=\"dark\">\n      <Link to=\"/\" className=\"navbar-brand\">\n        {process.env.REACT_APP_SITE_TITLE}\n      </Link>\n      <Form inline className=\"position-relative\" onSubmit={searchTermSubmit}>\n        <FormControl type=\"text\" className=\"mr-sm-2\" placeholder=\"Search\" onChange={updateSearchTerm} />\n        <Link to={`/search/?q=${searchTerm}`} className=\"btn btn-outline-warning\">\n          SEARCH\n        </Link>\n      </Form>\n    </Navbar>\n  );\n}\n","import React from \"react\";\n\nimport { Navbar, Nav, Image } from \"react-bootstrap\";\n\nexport default function SiteFooter() {\n  const Environment = () => {\n    if (process.env.NODE_ENV === \"development\") return <h5 className=\"text-uppercase\">{process.env.NODE_ENV}</h5>;\n    else return null;\n  };\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" className=\"text-white\">\n      <Nav className=\"mr-auto\">\n        <small className=\"d-block mb-3\">© 2020</small>\n      </Nav>\n      <Environment />\n    </Navbar>\n  );\n}\n","import React from \"react\";\nimport { CardDeck, Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Home({ recentCards, selectThisCard }) {\n  const cardItem = (card) => (\n    <Card key={\"recent-\" + card.id}>\n      {/* <Card.Img variant=\"top\" src=\"holder.js/100px180\" /> */}\n      <Card.Body>\n        <Card.Title>{card.name}</Card.Title>\n        {card.type}\n        <hr />\n        {/* <Card.Text style={{ maxHeight: \"100px\", overflow: \"scroll\" }}>{card.desc}</Card.Text> */}\n        <Link to={`/card/${card.id}`} className=\"btn btn-block btn-warning\" onClick={() => selectThisCard(card)}>\n          View Card\n        </Link>\n      </Card.Body>\n    </Card>\n  );\n  return (\n    <>\n      <h1>Home</h1>\n      <hr />\n      <h5>Recently Viewed Cards</h5>\n      <CardDeck>\n        {recentCards ? (\n          recentCards.map((card) => cardItem(card))\n        ) : (\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-center text-muted\">No Recently Viewed Cards</Card.Text>\n            </Card.Body>\n          </Card>\n        )}\n      </CardDeck>\n    </>\n  );\n}\n","import React, { Component } from \"react\";\n\nexport default class NotFound extends Component {\n  render() {\n    return (\n      <div className=\"text-center\">\n        <h1>404</h1>\n        <h5>Not Found</h5>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\n\n// import SearchResults from \"./SearchResults\";\nimport AlgoliaSearch from \"./AlgoliaSearch\";\nimport CardPage from \"./CardPage\";\nimport SiteNavBar from \"./SiteNavBar\";\nimport SiteFooter from \"./SiteFooter\";\nimport Home from \"./Home\";\nimport NotFound from \"./NotFound\";\n\nfunction App() {\n  const [card, setCard] = React.useState({});\n  const [recentlyViewed, setRecentlyViewed] = React.useState(JSON.parse(localStorage.getItem(\"recentlyViewed\")) || []);\n  const selectThisCard = (selectedCard) => {\n    console.log(\"Select card...\", selectedCard);\n    localStorage.setItem(\"selectedCard\", JSON.stringify(selectedCard));\n    setCard(selectedCard);\n    let newRecentlyViewedList = [\n      selectedCard,\n      ...recentlyViewed.filter((item) => {\n        return selectedCard && item ? item.id !== selectedCard.id : false;\n      }),\n    ];\n    setRecentlyViewed(newRecentlyViewedList.slice(0, 5));\n    localStorage.setItem(\"recentlyViewed\", JSON.stringify(newRecentlyViewedList));\n  };\n  return (\n    <Router>\n      <Container className=\"mb-3\" style={{ minHeight: \"calc(100vh - 83px)\" }}>\n        <Row>\n          <Col className=\"py-3\">\n            <SiteNavBar />\n          </Col>\n        </Row>\n        <Card className=\"shadow-lg\">\n          <Card.Body>\n            <Switch>\n              <Route\n                path=\"/search\"\n                render={(props) => (\n                  // <SearchResults {...props} selectThisCard={(selectedCard) => selectThisCard(selectedCard)} />\n                  <AlgoliaSearch {...props} selectThisCard={(selectedCard) => selectThisCard(selectedCard)} />\n                )}\n              />\n              <Route\n                path=\"/card/:id\"\n                render={(props) => (\n                  <CardPage {...props} selectThisCard={(selectedCard) => selectThisCard(selectedCard)} card={card} />\n                )}\n              />\n              <Route path=\"/404\" component={NotFound} />\n              <Route path=\"/\">\n                <Home recentCards={recentlyViewed} selectThisCard={(selectedCard) => selectThisCard(selectedCard)} />\n              </Route>\n            </Switch>\n          </Card.Body>\n        </Card>\n      </Container>\n      <SiteFooter />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}